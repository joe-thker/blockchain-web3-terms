{
	"compiler": {
		"version": "0.8.19+commit.7dd6d404"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_supportLevel",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_resistanceLevel",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_initialPrice",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_priceUpdater",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newPrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "supportLevel",
						"type": "uint256"
					}
				],
				"name": "DownwardBreak",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newPrice",
						"type": "uint256"
					}
				],
				"name": "PriceUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newPrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "resistanceLevel",
						"type": "uint256"
					}
				],
				"name": "UpwardBreak",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "getMarketInfo",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "currentPrice",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "currentSupport",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "currentResistance",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lastPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "priceUpdater",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "resistanceLevel",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "supportLevel",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_newPrice",
						"type": "uint256"
					}
				],
				"name": "updatePrice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_newSupport",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_newResistance",
						"type": "uint256"
					}
				],
				"name": "updateThresholds",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"getMarketInfo()": {
					"returns": {
						"currentPrice": "The last updated price.",
						"currentResistance": "The current resistance level.",
						"currentSupport": "The current support level."
					}
				},
				"updatePrice(uint256)": {
					"params": {
						"_newPrice": "The new price to update."
					}
				},
				"updateThresholds(uint256,uint256)": {
					"params": {
						"_newResistance": "The new resistance level.",
						"_newSupport": "The new support level."
					}
				}
			},
			"title": "BreakingIndicator",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"getMarketInfo()": {
					"notice": "Retrieves the current price and thresholds."
				},
				"updatePrice(uint256)": {
					"notice": "Updates the price and checks for a break event. Only the authorized priceUpdater can call this function."
				},
				"updateThresholds(uint256,uint256)": {
					"notice": "Allows the owner to update the support and resistance levels."
				}
			},
			"notice": "A contract that detects \"break\" events when price crosses defined support or resistance levels. It is intended to simulate the idea of a breakout indicator in crypto markets.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"B/breaking.sol": "BreakingIndicator"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"B/breaking.sol": {
			"keccak256": "0x9f358a8e9a0a0ff8a06ff8df6462c1fdc35749095e1de3a0de184419fb77d9c8",
			"license": "MIT",
			"urls": [
				"bzz-raw://e41d10095b8ae74dd9c716cb9e3e3a5291c6ec23127aa4cb86f7d207c397d22e",
				"dweb:/ipfs/QmeNCor8ws445qvWceFvcZ5Bw6Dd7MPrrJi2qZLXWKYMWj"
			]
		}
	},
	"version": 1
}