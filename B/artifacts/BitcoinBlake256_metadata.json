{
	"compiler": {
		"version": "0.8.19+commit.7dd6d404"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "blake256Hash",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "This is a placeholder implementation using keccak256. For a true BLAKE-256, use an off-chain library or precompile.",
			"kind": "dev",
			"methods": {
				"blake256Hash(bytes)": {
					"params": {
						"data": "The input data as bytes."
					},
					"returns": {
						"_0": "The resulting 256-bit hash (bytes32)."
					}
				}
			},
			"title": "BitcoinBlake256",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"blake256Hash(bytes)": {
					"notice": "Computes the \"BLAKE-256\" hash of the provided data."
				}
			},
			"notice": "A simplified contract that simulates the interface of the BLAKE-256 hash function.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"B/black256.sol": "BitcoinBlake256"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"B/black256.sol": {
			"keccak256": "0x4b13fc57b477d895461a279cd46505ab0315c6111c1013f59cc0ca39caaf1172",
			"license": "MIT",
			"urls": [
				"bzz-raw://5883f887be67dedb27c8e5a8fe8ea4e905f90b480b98b195ab53c1c239e93926",
				"dweb:/ipfs/QmYscJzL9tSSb8YDC2cbyj9xS5ZRQdwwKNM1uJJFfJXwbc"
			]
		}
	},
	"version": 1
}