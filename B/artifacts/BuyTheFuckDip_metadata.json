{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_dipThreshold",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_initialPrice",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "buyer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokensBought",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "purchasePrice",
						"type": "uint256"
					}
				],
				"name": "DipBought",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newThreshold",
						"type": "uint256"
					}
				],
				"name": "DipThresholdUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newPrice",
						"type": "uint256"
					}
				],
				"name": "PriceUpdated",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "buyDip",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "dipThreshold",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "tokensPurchased",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_newThreshold",
						"type": "uint256"
					}
				],
				"name": "updateDipThreshold",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_newPrice",
						"type": "uint256"
					}
				],
				"name": "updatePrice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"constructor": {
					"params": {
						"_dipThreshold": "The price threshold that defines a dip.",
						"_initialPrice": "The initial market price."
					}
				},
				"updateDipThreshold(uint256)": {
					"params": {
						"_newThreshold": "The new dip threshold."
					}
				},
				"updatePrice(uint256)": {
					"params": {
						"_newPrice": "The new market price."
					}
				}
			},
			"title": "BuyTheFuckDip",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"buyDip()": {
					"notice": "Allows users to buy tokens when the current price is below the dip threshold. Tokens are calculated as the amount of Ether sent divided by the current price."
				},
				"constructor": {
					"notice": "Constructor sets the owner, initial dip threshold, and initial price."
				},
				"updateDipThreshold(uint256)": {
					"notice": "Allows the owner to update the dip threshold."
				},
				"updatePrice(uint256)": {
					"notice": "Allows the owner to update the current market price."
				}
			},
			"notice": "A contract that simulates a dip-buying mechanism in crypto markets. When the current price falls below a preset dip threshold, users can buy tokens at that dip.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"B/btd buyTheFuckDep.sol": "BuyTheFuckDip"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"B/btd buyTheFuckDep.sol": {
			"keccak256": "0x3505e3453c6e37c32ca0a1a9c3724243a40f1cf84cd1b03c4775c6268b080dcb",
			"license": "MIT",
			"urls": [
				"bzz-raw://3945f800133feff1e62b0eca4d9ef9c351f3c3f87481539e073b16dff4a85767",
				"dweb:/ipfs/QmXjXNSiuHBd9Ksw6nmjmPoUBPDsRYRw4uKHdBY37h6rGy"
			]
		}
	},
	"version": 1
}