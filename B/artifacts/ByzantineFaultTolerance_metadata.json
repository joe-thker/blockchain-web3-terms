{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_validators",
						"type": "address[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "decision",
						"type": "bool"
					}
				],
				"name": "ProposalFinalized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "description",
						"type": "string"
					}
				],
				"name": "ProposalSubmitted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "validator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "vote",
						"type": "bool"
					}
				],
				"name": "Voted",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "THRESHOLD_PERCENT",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "getProposal",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "description",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "trueVotes",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "falseVotes",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalVotes",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "finalized",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "decision",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "proposalCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "requiredVotes",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "description",
						"type": "string"
					}
				],
				"name": "submitProposal",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "validators",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "voteValue",
						"type": "bool"
					}
				],
				"name": "vote",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"getProposal(uint256)": {
					"params": {
						"proposalId": "The ID of the proposal."
					},
					"returns": {
						"decision": "The final decision (true if accepted, false if rejected).",
						"description": "The proposal description.",
						"falseVotes": "Number of \"false\" votes.",
						"finalized": "Whether the proposal is finalized.",
						"id": "The proposal ID.",
						"totalVotes": "Total votes cast.",
						"trueVotes": "Number of \"true\" votes."
					}
				},
				"requiredVotes()": {
					"returns": {
						"_0": "The required number of votes."
					}
				},
				"submitProposal(string)": {
					"params": {
						"description": "A description of the proposal."
					},
					"returns": {
						"proposalId": "The unique ID of the submitted proposal."
					}
				},
				"vote(uint256,bool)": {
					"params": {
						"proposalId": "The ID of the proposal to vote on.",
						"voteValue": "The vote (true for acceptance, false for rejection)."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"getProposal(uint256)": {
					"notice": "Retrieves proposal details by its ID."
				},
				"requiredVotes()": {
					"notice": "Calculates the minimum number of votes required for finalization."
				},
				"submitProposal(string)": {
					"notice": "Submits a new proposal. Only validators can submit proposals."
				},
				"vote(uint256,bool)": {
					"notice": "Casts a vote on a proposal."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"B/byzantineFaultTolerance.sol": "ByzantineFaultTolerance"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"B/byzantineFaultTolerance.sol": {
			"keccak256": "0x79ef8c747e993d5f417cdce5010af13de0cfda1b0e2be56eb9e12b7f2af8b568",
			"license": "MIT",
			"urls": [
				"bzz-raw://d1dc88a281fd6f5457b4dd75148a797b5645af83db1e7cef12ae940482cce01a",
				"dweb:/ipfs/QmT8sTy61oUNmM7fvXczPd9eyycNQzs5NbxoRJYhhUu5us"
			]
		}
	},
	"version": 1
}