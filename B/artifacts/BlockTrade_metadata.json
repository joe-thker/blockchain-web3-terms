{
	"compiler": {
		"version": "0.8.29+commit.ab55807c"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "orderId",
						"type": "uint256"
					}
				],
				"name": "TradeOrderCanceled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "orderId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "pricePerToken",
						"type": "uint256"
					}
				],
				"name": "TradeOrderCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "orderId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "buyer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalCost",
						"type": "uint256"
					}
				],
				"name": "TradeOrderExecuted",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "orderId",
						"type": "uint256"
					}
				],
				"name": "cancelTradeOrder",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IBEP20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "pricePerToken",
						"type": "uint256"
					}
				],
				"name": "createTradeOrder",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "orderId",
						"type": "uint256"
					}
				],
				"name": "executeTradeOrder",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nextOrderId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "tradeOrders",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"internalType": "contract IBEP20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "pricePerToken",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "active",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"cancelTradeOrder(uint256)": {
					"params": {
						"orderId": "The ID of the trade order to cancel."
					}
				},
				"createTradeOrder(address,uint256,uint256)": {
					"params": {
						"amount": "The amount of tokens to sell.",
						"pricePerToken": "The fixed price per token in wei.",
						"token": "The address of the token being sold."
					}
				},
				"executeTradeOrder(uint256)": {
					"params": {
						"orderId": "The ID of the trade order to execute."
					}
				}
			},
			"title": "BlockTrade",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"cancelTradeOrder(uint256)": {
					"notice": "Seller can cancel an active trade order."
				},
				"createTradeOrder(address,uint256,uint256)": {
					"notice": "Seller creates a new block trade order."
				},
				"executeTradeOrder(uint256)": {
					"notice": "Buyer executes a trade order by sending sufficient Ether."
				}
			},
			"notice": "A contract that simulates a block trade mechanism for large, privately negotiated token trades.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"B/blockTrade.sol": "BlockTrade"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"B/blockTrade.sol": {
			"keccak256": "0x86b31bb2a753cb5b0792e0d190dbbf3f5730ad0bddc71f667e97e1e120d651b1",
			"license": "MIT",
			"urls": [
				"bzz-raw://cc0008c94ecd3d701799cbb9d7dd741c36b7732b79bc753e429c28841d992752",
				"dweb:/ipfs/Qmbzx3VzhxbhBNTKcDnmiBCoid5UC1crAyCsqqfoEhNos8"
			]
		}
	},
	"version": 1
}