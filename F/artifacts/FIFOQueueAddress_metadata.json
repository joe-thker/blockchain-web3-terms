{
	"compiler": {
		"version": "0.8.29+commit.ab55807c"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "dequeue",
				"outputs": [
					{
						"internalType": "address",
						"name": "item",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "item",
						"type": "address"
					}
				],
				"name": "enqueue",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isEmpty",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "peek",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "size",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "A simple FIFO (First In, First Out) queue for storing addresses.",
			"kind": "dev",
			"methods": {
				"constructor": {
					"details": "Constructor initializes the queue indices."
				},
				"dequeue()": {
					"details": "Dequeues the first address from the queue.",
					"returns": {
						"item": "The dequeued address."
					}
				},
				"enqueue(address)": {
					"details": "Enqueues an address into the queue.",
					"params": {
						"item": "The address to add."
					}
				},
				"isEmpty()": {
					"details": "Checks whether the queue is empty.",
					"returns": {
						"_0": "True if empty, otherwise false."
					}
				},
				"peek()": {
					"details": "Peeks at the address at the front of the queue without removing it.",
					"returns": {
						"_0": "The address at the front."
					}
				},
				"size()": {
					"details": "Returns the current number of elements in the queue.",
					"returns": {
						"_0": "The size of the queue."
					}
				}
			},
			"title": "FIFOQueueAddress",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"F/FIFOQueueAddress.sol": "FIFOQueueAddress"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"F/FIFOQueueAddress.sol": {
			"keccak256": "0x7e354dd9beab80d0a34d5e8e34687acde325c8b4f4393d147a0ba28c9c223cd7",
			"license": "MIT",
			"urls": [
				"bzz-raw://76a096611bdc83841f8b3b987f14a05b3528b5f10397946295fcc18533822a3e",
				"dweb:/ipfs/QmXPuHSZ4jCvrBW3bfhbSCKTMqjE4vHhwRRWenP91JoSRT"
			]
		}
	},
	"version": 1
}