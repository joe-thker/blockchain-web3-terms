{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_initialPrice",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "trader",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "CollateralDeposited",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "trader",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "CollateralWithdrawn",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "trader",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "exitPrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "profitOrLoss",
						"type": "int256"
					}
				],
				"name": "PositionClosed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "trader",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "enum CrossMarginTrading.PositionType",
						"name": "positionType",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "entryPrice",
						"type": "uint256"
					}
				],
				"name": "PositionOpened",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newPrice",
						"type": "uint256"
					}
				],
				"name": "PriceUpdated",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "positionId",
						"type": "uint256"
					}
				],
				"name": "closePosition",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "depositCollateral",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "positionId",
						"type": "uint256"
					}
				],
				"name": "getPosition",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "id",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "trader",
								"type": "address"
							},
							{
								"internalType": "enum CrossMarginTrading.PositionType",
								"name": "positionType",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "entryPrice",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "open",
								"type": "bool"
							}
						],
						"internalType": "struct CrossMarginTrading.Position",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nextPositionId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "enum CrossMarginTrading.PositionType",
						"name": "posType",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "openPosition",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "positions",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "trader",
						"type": "address"
					},
					{
						"internalType": "enum CrossMarginTrading.PositionType",
						"name": "positionType",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "entryPrice",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "open",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "traderCollateral",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newPrice",
						"type": "uint256"
					}
				],
				"name": "updatePrice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdrawCollateral",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"closePosition(uint256)": {
					"params": {
						"positionId": "The ID of the position to close."
					}
				},
				"depositCollateral()": {
					"details": "Collateral is stored as Ether."
				},
				"getPosition(uint256)": {
					"params": {
						"positionId": "The ID of the position."
					},
					"returns": {
						"_0": "The Position struct."
					}
				},
				"openPosition(uint8,uint256)": {
					"params": {
						"amount": "The quantity of the asset in the position.",
						"posType": "The type of position: 0 for Long, 1 for Short."
					}
				},
				"updatePrice(uint256)": {
					"params": {
						"newPrice": "The updated market price."
					}
				},
				"withdrawCollateral(uint256)": {
					"params": {
						"amount": "The amount of Ether to withdraw."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"closePosition(uint256)": {
					"notice": "Close an open margin position and calculate profit or loss."
				},
				"depositCollateral()": {
					"notice": "Deposit collateral into the trading account."
				},
				"getPosition(uint256)": {
					"notice": "Retrieves details of a specific position."
				},
				"openPosition(uint8,uint256)": {
					"notice": "Open a new margin position using the trader's collateral."
				},
				"updatePrice(uint256)": {
					"notice": "Allows the owner to update the current market price."
				},
				"withdrawCollateral(uint256)": {
					"notice": "Withdraw collateral if no open positions (or if collateralization requirements are met)."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"C2/crossMargin.sol": "CrossMarginTrading"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
			"license": "MIT",
			"urls": [
				"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
				"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
			]
		},
		"C2/crossMargin.sol": {
			"keccak256": "0x1a39442a741a6594369164cd7514987fbcb1dc07e7f818d88e7b5e117cf7b557",
			"license": "MIT",
			"urls": [
				"bzz-raw://2c4e9c3901f9fd3f70883ba5f724970f71b16cd61f4bc565f9ace71131e201a7",
				"dweb:/ipfs/QmZHUHLe8M3CMz1mZv2hZs6HMkkgXVw1aa5ZtGJ6cF2Giq"
			]
		}
	},
	"version": 1
}