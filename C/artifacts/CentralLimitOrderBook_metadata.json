{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "buyOrderId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "sellOrderId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "matchPrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "matchAmount",
						"type": "uint256"
					}
				],
				"name": "OrderMatched",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "orderId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "trader",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isBuy",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "OrderPlaced",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "orderId",
						"type": "uint256"
					}
				],
				"name": "getOrder",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "id",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "trader",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "isBuy",
								"type": "bool"
							},
							{
								"internalType": "uint256",
								"name": "price",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "filled",
								"type": "bool"
							}
						],
						"internalType": "struct CentralLimitOrderBook.Order",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getOrderCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "matchOrders",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nextOrderId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "orders",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "trader",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "isBuy",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "filled",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "isBuy",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "placeOrder",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"getOrder(uint256)": {
					"params": {
						"orderId": "The ID of the order."
					},
					"returns": {
						"_0": "The order struct."
					}
				},
				"getOrderCount()": {
					"returns": {
						"_0": "The count of orders."
					}
				},
				"placeOrder(bool,uint256,uint256)": {
					"params": {
						"amount": "The amount of tokens to buy or sell.",
						"isBuy": "True for a buy order, false for a sell order.",
						"price": "The limit price per token."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"getOrder(uint256)": {
					"notice": "Retrieves a specific order by its ID."
				},
				"getOrderCount()": {
					"notice": "Returns the total number of orders in the order book."
				},
				"matchOrders()": {
					"notice": "Matches buy and sell orders if the buy order's price is equal to or exceeds the sell order's price. This is a simple matching function that iterates over all orders."
				},
				"placeOrder(bool,uint256,uint256)": {
					"notice": "Places an order in the order book."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"C/centralLimitOrderBooks.sol": "CentralLimitOrderBook"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"C/centralLimitOrderBooks.sol": {
			"keccak256": "0x918e42a0a59f9988598445fdd7f60ec66c1cde7cdb954d957e39edbd7f78462c",
			"license": "MIT",
			"urls": [
				"bzz-raw://fda457c2f780c9d7ea80ca5d2e8926f3a56f156f97972af8927ffdfb8314cdc1",
				"dweb:/ipfs/Qmd41BGMAs18mjWa1QeHsy1AvohLiiAMHUPxnnSy4RsgDN"
			]
		}
	},
	"version": 1
}