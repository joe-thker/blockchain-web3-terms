{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "purchaseId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "refunded",
						"type": "bool"
					}
				],
				"name": "DisputeResolved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "merchant",
						"type": "address"
					}
				],
				"name": "MerchantRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "merchant",
						"type": "address"
					}
				],
				"name": "MerchantRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "purchaseId",
						"type": "uint256"
					}
				],
				"name": "PurchaseCancelled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "purchaseId",
						"type": "uint256"
					}
				],
				"name": "PurchaseDelivered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "purchaseId",
						"type": "uint256"
					}
				],
				"name": "PurchaseDisputed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "purchaseId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "consumer",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "merchant",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "PurchaseInitiated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "purchaseId",
						"type": "uint256"
					}
				],
				"name": "PurchaseRefunded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "purchaseId",
						"type": "uint256"
					}
				],
				"name": "PurchaseShipped",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "approvedMerchants",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "purchaseId",
						"type": "uint256"
					}
				],
				"name": "cancelPurchase",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "purchaseId",
						"type": "uint256"
					}
				],
				"name": "confirmDelivery",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "purchaseId",
						"type": "uint256"
					}
				],
				"name": "disputePurchase",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "merchant",
						"type": "address"
					}
				],
				"name": "initiatePurchase",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "purchaseId",
						"type": "uint256"
					}
				],
				"name": "markShipped",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nextPurchaseId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "purchases",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "address payable",
						"name": "consumer",
						"type": "address"
					},
					{
						"internalType": "address payable",
						"name": "merchant",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "enum ConsumerCrypto.PurchaseStatus",
						"name": "status",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "merchant",
						"type": "address"
					}
				],
				"name": "registerMerchant",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "merchant",
						"type": "address"
					}
				],
				"name": "removeMerchant",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "purchaseId",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "refund",
						"type": "bool"
					}
				],
				"name": "resolveDispute",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"cancelPurchase(uint256)": {
					"params": {
						"purchaseId": "The ID of the purchase."
					}
				},
				"confirmDelivery(uint256)": {
					"params": {
						"purchaseId": "The ID of the purchase."
					}
				},
				"disputePurchase(uint256)": {
					"params": {
						"purchaseId": "The ID of the purchase."
					}
				},
				"initiatePurchase(address)": {
					"params": {
						"merchant": "The address of the approved merchant."
					}
				},
				"markShipped(uint256)": {
					"params": {
						"purchaseId": "The ID of the purchase."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"registerMerchant(address)": {
					"params": {
						"merchant": "The address of the merchant to register."
					}
				},
				"removeMerchant(address)": {
					"params": {
						"merchant": "The address of the merchant to remove."
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"resolveDispute(uint256,bool)": {
					"params": {
						"purchaseId": "The ID of the disputed purchase.",
						"refund": "True to refund the consumer, false to release funds to the merchant."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"cancelPurchase(uint256)": {
					"notice": "Consumer cancels a purchase if the merchant hasn't shipped within 3 days."
				},
				"confirmDelivery(uint256)": {
					"notice": "Consumer confirms delivery, releasing funds to the merchant."
				},
				"constructor": {
					"notice": "Constructor sets the deployer as the initial owner."
				},
				"disputePurchase(uint256)": {
					"notice": "Consumer disputes a purchase."
				},
				"initiatePurchase(address)": {
					"notice": "Consumer initiates a purchase by sending Ether to an approved merchant."
				},
				"markShipped(uint256)": {
					"notice": "Merchant marks a purchase as shipped."
				},
				"registerMerchant(address)": {
					"notice": "Registers a merchant. Only the owner can call this."
				},
				"removeMerchant(address)": {
					"notice": "Removes a merchant. Only the owner can call this."
				},
				"resolveDispute(uint256,bool)": {
					"notice": "Owner resolves a dispute. If refund is true, funds are returned to the consumer; otherwise, funds are released to the merchant."
				}
			},
			"notice": "ConsumerCrypto implements an escrow system for consumer–merchant transactions. Approved merchants can be registered by the owner, and consumers can initiate purchases by sending Ether to an approved merchant. The funds remain in escrow until the consumer confirms delivery (or disputes the purchase).",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"C/ConsumerCrypto.sol": "ConsumerCrypto"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
			"license": "MIT",
			"urls": [
				"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
				"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"C/ConsumerCrypto.sol": {
			"keccak256": "0xb58f16b905b6e0a3d7311a9e66002f93f472f50858ca300babccc44cffc727ac",
			"license": "MIT",
			"urls": [
				"bzz-raw://33cc93c1f7f8db1fe12f6e40b24e78f250e4ab7ac28543bfd30eff1147ec0c8a",
				"dweb:/ipfs/QmUPeUAtqnMMPkoyTqTCJPzhr12pKXcDMmzWGZvVVEobhS"
			]
		}
	},
	"version": 1
}