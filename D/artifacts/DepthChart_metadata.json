{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "OrderCanceled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "enum DepthChart.OrderSide",
						"name": "side",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "size",
						"type": "uint256"
					}
				],
				"name": "OrderPlaced",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldPrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldSize",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newPrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newSize",
						"type": "uint256"
					}
				],
				"name": "OrderUpdated",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "aggregatedSize",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "orderId",
						"type": "uint256"
					}
				],
				"name": "cancelOrder",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getActiveOrders",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "enum DepthChart.OrderSide",
						"name": "side",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"name": "getAggregatedSize",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "orderId",
						"type": "uint256"
					}
				],
				"name": "getOrder",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "id",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "owner",
								"type": "address"
							},
							{
								"internalType": "enum DepthChart.OrderSide",
								"name": "side",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "price",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "size",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "active",
								"type": "bool"
							}
						],
						"internalType": "struct DepthChart.UserOrder",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nextOrderId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "orders",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "enum DepthChart.OrderSide",
						"name": "side",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "size",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "active",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "enum DepthChart.OrderSide",
						"name": "side",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "size",
						"type": "uint256"
					}
				],
				"name": "placeOrder",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "orderId",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalOrders",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "orderId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "newPrice",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "newSize",
						"type": "uint256"
					}
				],
				"name": "updateOrder",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"cancelOrder(uint256)": {
					"params": {
						"orderId": "The ID of the order to cancel."
					}
				},
				"getAggregatedSize(uint8,uint256)": {
					"params": {
						"price": "The price level.",
						"side": "The order side (Bid or Ask)."
					},
					"returns": {
						"_0": "The total aggregated size at that price level for the specified side."
					}
				},
				"placeOrder(uint8,uint256,uint256)": {
					"params": {
						"price": "The price for the order.",
						"side": "The side of the order (Bid or Ask).",
						"size": "The size (quantity) of the order."
					},
					"returns": {
						"orderId": "The unique ID assigned to the placed order."
					}
				},
				"updateOrder(uint256,uint256,uint256)": {
					"params": {
						"newPrice": "The new price of the order.",
						"newSize": "The new size of the order.",
						"orderId": "The ID of the order to update."
					}
				}
			},
			"title": "DepthChart",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"cancelOrder(uint256)": {
					"notice": "Cancels an existing order, removing it from the depth chart aggregation."
				},
				"getActiveOrders()": {
					"notice": "Returns an array of currently active order IDs."
				},
				"getAggregatedSize(uint8,uint256)": {
					"notice": "Returns the aggregated size at a given side and price."
				},
				"getOrder(uint256)": {
					"notice": "Retrieves the user order struct by ID."
				},
				"placeOrder(uint8,uint256,uint256)": {
					"notice": "Places a new order, aggregating its size at the given price for either bid or ask side."
				},
				"totalOrders()": {
					"notice": "Returns the total number of orders ever created (including canceled)."
				},
				"updateOrder(uint256,uint256,uint256)": {
					"notice": "Updates an existing order with a new price and/or size."
				}
			},
			"notice": "A decentralized depth chart aggregator tracking bid/ask orders at various price levels. Orders are aggregated by price level to minimize storage. This contract is dynamic (orders can be added, updated, and canceled) and optimized (aggregates total size per price level).",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"D/depthChart.sol": "DepthChart"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
			"license": "MIT",
			"urls": [
				"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
				"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
			]
		},
		"D/depthChart.sol": {
			"keccak256": "0x65f9ea57ef9fda551196660569d95111dcfd98a9e38aaa6f488621bea0bb60f7",
			"license": "MIT",
			"urls": [
				"bzz-raw://2ca7a85cabdae4af89039ba3d17e5838659480c79ad9e319a9beb2888d6ae880",
				"dweb:/ipfs/QmSroGbuUTxuUgvxTjG3LneAWXZV9h1aQz3yavwSpLd1ot"
			]
		}
	},
	"version": 1
}