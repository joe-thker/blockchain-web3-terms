{
	"compiler": {
		"version": "0.8.25+commit.b61c2a91"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "enum DigitalAssetEcosystem.AssetType",
						"name": "assetType",
						"type": "uint8"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "assetAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "metadataURI",
						"type": "string"
					}
				],
				"name": "AssetRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "AssetRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "enum DigitalAssetEcosystem.AssetType",
						"name": "newType",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "newMetadataURI",
						"type": "string"
					}
				],
				"name": "AssetUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "assetIndexPlusOne",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "assetList",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "enum DigitalAssetEcosystem.AssetType",
						"name": "assetType",
						"type": "uint8"
					},
					{
						"internalType": "address",
						"name": "assetAddress",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "metadataURI",
						"type": "string"
					},
					{
						"internalType": "bool",
						"name": "active",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getAsset",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "id",
								"type": "uint256"
							},
							{
								"internalType": "enum DigitalAssetEcosystem.AssetType",
								"name": "assetType",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "assetAddress",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "metadataURI",
								"type": "string"
							},
							{
								"internalType": "bool",
								"name": "active",
								"type": "bool"
							}
						],
						"internalType": "struct DigitalAssetEcosystem.Asset",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "listActiveAssets",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "id",
								"type": "uint256"
							},
							{
								"internalType": "enum DigitalAssetEcosystem.AssetType",
								"name": "assetType",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "assetAddress",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "metadataURI",
								"type": "string"
							},
							{
								"internalType": "bool",
								"name": "active",
								"type": "bool"
							}
						],
						"internalType": "struct DigitalAssetEcosystem.Asset[]",
						"name": "activeAssets",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "assetAddr",
						"type": "address"
					},
					{
						"internalType": "enum DigitalAssetEcosystem.AssetType",
						"name": "aType",
						"type": "uint8"
					},
					{
						"internalType": "string",
						"name": "metadataURI",
						"type": "string"
					}
				],
				"name": "registerAsset",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "assetId",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "removeAsset",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalAssetCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					},
					{
						"internalType": "enum DigitalAssetEcosystem.AssetType",
						"name": "newType",
						"type": "uint8"
					},
					{
						"internalType": "string",
						"name": "newMetadataURI",
						"type": "string"
					}
				],
				"name": "updateAsset",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"getAsset(uint256)": {
					"params": {
						"index": "The index in the assetList (the asset ID)."
					},
					"returns": {
						"_0": "The Asset struct for that index."
					}
				},
				"listActiveAssets()": {
					"returns": {
						"activeAssets": "A dynamic array of all active Asset structs."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"registerAsset(address,uint8,string)": {
					"params": {
						"aType": "The enumerated asset type.",
						"assetAddr": "The address of the digital asset contract (ERC20, ERC721, etc.).",
						"metadataURI": "An optional metadata URI describing the asset."
					},
					"returns": {
						"assetId": "The ID assigned to this asset in the list."
					}
				},
				"removeAsset(uint256)": {
					"params": {
						"index": "The index of the asset in assetList."
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"totalAssetCount()": {
					"returns": {
						"_0": "The length of the assetList array."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"updateAsset(uint256,uint8,string)": {
					"params": {
						"index": "The index in the assetList (this is also the assetâ€™s ID).",
						"newMetadataURI": "The new metadata URI.",
						"newType": "The new asset type (e.g., from ERC20 to Other)."
					}
				}
			},
			"title": "DigitalAssetEcosystem",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"constructor": {
					"notice": "Constructor sets the deployer as the initial owner, fixing the missing constructor arguments issue."
				},
				"getAsset(uint256)": {
					"notice": "Retrieves an asset by its index in the assetList."
				},
				"listActiveAssets()": {
					"notice": "Returns an array of all currently active assets in the ecosystem."
				},
				"registerAsset(address,uint8,string)": {
					"notice": "Registers a new digital asset. Only the owner can register."
				},
				"removeAsset(uint256)": {
					"notice": "Removes (marks as inactive) an asset from the ecosystem. Only the owner can remove."
				},
				"totalAssetCount()": {
					"notice": "Returns the total number of assets ever registered (including removed)."
				},
				"updateAsset(uint256,uint8,string)": {
					"notice": "Updates an existing assetâ€™s type or metadata. Only the owner can update."
				}
			},
			"notice": "A dynamic, optimized contract that manages a registry of various digital assets (e.g., ERC20, ERC721, or other on-chain references). Owners can register, update, or remove assets from the ecosystem. The contract stores minimal metadata and ensures secure operations using ReentrancyGuard.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"D/digitalAssetEcosystem.sol": "DigitalAssetEcosystem"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
			"license": "MIT",
			"urls": [
				"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
				"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"D/digitalAssetEcosystem.sol": {
			"keccak256": "0x0876870dd74516df055e896ab01e2204628777eced69885b1518fee35450bba0",
			"license": "MIT",
			"urls": [
				"bzz-raw://07e1e5f0bbf35fd9143104906eb4fc6ee155c7d4bd1a4edf606768a7d28d3a8f",
				"dweb:/ipfs/QmWCkBgvzXvw9WZyRoVa7W1QAW1qGgMoXzAoJkAsEXr1q9"
			]
		}
	},
	"version": 1
}