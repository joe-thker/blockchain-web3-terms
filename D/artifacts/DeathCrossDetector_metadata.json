{
	"compiler": {
		"version": "0.8.29+commit.ab55807c"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_shortTermPeriod",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_longTermPeriod",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "eventIndex",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "shortTermAvg",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "longTermAvg",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "DeathCrossRecorded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "shortTermPeriod",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "longTermPeriod",
						"type": "uint256"
					}
				],
				"name": "ParametersUpdated",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getDeathCrossEvent",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "shortTermAvg",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "longTermAvg",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "timestamp",
								"type": "uint256"
							}
						],
						"internalType": "struct DeathCrossDetector.DeathCrossEvent",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getDeathCrossEventCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "longTermPeriod",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "shortTermPeriod",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "prevShortTermAvg",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "prevLongTermAvg",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "currentShortTermAvg",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "currentLongTermAvg",
						"type": "uint256"
					}
				],
				"name": "submitMovingAverages",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_shortTermPeriod",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_longTermPeriod",
						"type": "uint256"
					}
				],
				"name": "updateParameters",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"submitMovingAverages(uint256,uint256,uint256,uint256)": {
					"params": {
						"currentLongTermAvg": "The current long-term moving average.",
						"currentShortTermAvg": "The current short-term moving average.",
						"prevLongTermAvg": "The previous long-term moving average.",
						"prevShortTermAvg": "The previous short-term moving average."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "DeathCrossDetector",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"constructor": {
					"notice": "Constructor sets initial moving average periods (50-day & 200-day as defaults)."
				},
				"getDeathCrossEvent(uint256)": {
					"notice": "Retrieves details of a specific Death Cross event by index."
				},
				"getDeathCrossEventCount()": {
					"notice": "Returns the total number of Death Cross events recorded."
				},
				"submitMovingAverages(uint256,uint256,uint256,uint256)": {
					"notice": "Owner submits moving average data to check and record a Death Cross event."
				},
				"updateParameters(uint256,uint256)": {
					"notice": "Owner can dynamically update moving average periods."
				}
			},
			"notice": "Dynamically detects and records \"Death Cross\" events based on moving averages provided off-chain.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"D/deathCross.sol": "DeathCrossDetector"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
			"license": "MIT",
			"urls": [
				"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
				"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"D/deathCross.sol": {
			"keccak256": "0x96d58b263750fcbc965efd70f5916e01fff52c6c678b0c1ca72f3583185a28fc",
			"license": "MIT",
			"urls": [
				"bzz-raw://59b8bff4f7d8f4bd3ecfc0d0ffe2926bc84a55c792d50107b6b847cdebef5a1a",
				"dweb:/ipfs/QmQRowgZVvEt7KzE84amEHqe4qYv629aotBxhxKNEprWJt"
			]
		}
	},
	"version": 1
}