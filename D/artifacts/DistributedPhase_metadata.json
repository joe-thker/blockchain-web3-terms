{
	"compiler": {
		"version": "0.8.29+commit.ab55807c"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "participant",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "phaseId",
						"type": "uint256"
					}
				],
				"name": "ParticipantAssigned",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "phaseId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "name",
						"type": "string"
					}
				],
				"name": "PhaseCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "phaseId",
						"type": "uint256"
					}
				],
				"name": "PhaseRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "phaseId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "newName",
						"type": "string"
					}
				],
				"name": "PhaseUpdated",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "participant",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "phaseId",
						"type": "uint256"
					}
				],
				"name": "assignParticipant",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "phaseName",
						"type": "string"
					}
				],
				"name": "createPhase",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "phaseId",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "phaseId",
						"type": "uint256"
					}
				],
				"name": "getPhase",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "id",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "active",
								"type": "bool"
							},
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							}
						],
						"internalType": "struct DistributedPhase.Phase",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nextPhaseId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "participantPhase",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "phases",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "active",
						"type": "bool"
					},
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "phaseId",
						"type": "uint256"
					}
				],
				"name": "removePhase",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalPhases",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "phaseId",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "newName",
						"type": "string"
					}
				],
				"name": "updatePhase",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"assignParticipant(address,uint256)": {
					"params": {
						"participant": "The participant's address.",
						"phaseId": "The ID of the phase to assign the participant to."
					}
				},
				"createPhase(string)": {
					"params": {
						"phaseName": "A descriptive label for the new phase."
					},
					"returns": {
						"phaseId": "The unique ID assigned to the newly created phase."
					}
				},
				"getPhase(uint256)": {
					"params": {
						"phaseId": "The ID of the phase to fetch."
					},
					"returns": {
						"_0": "A Phase struct containing id, active, and name fields."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"removePhase(uint256)": {
					"params": {
						"phaseId": "The ID of the phase to remove."
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"totalPhases()": {
					"returns": {
						"_0": "The length of the phases array."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"updatePhase(uint256,string)": {
					"params": {
						"newName": "The new name for the phase.",
						"phaseId": "The ID of the phase to update."
					}
				}
			},
			"title": "DistributedPhase",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"assignParticipant(address,uint256)": {
					"notice": "Assigns a participant to a specified phase. Only the owner can assign participants. Even if the phase is inactive, you may set the participant’s phase – handle logic externally if you wish."
				},
				"constructor": {
					"notice": "Constructor sets the deployer as the initial owner (fixing the “no arguments” base constructor issue)."
				},
				"createPhase(string)": {
					"notice": "Creates a new phase with a specified name. Only the owner can create phases."
				},
				"getPhase(uint256)": {
					"notice": "Retrieves phase details by ID."
				},
				"removePhase(uint256)": {
					"notice": "Removes (marks as inactive) a phase so it cannot be assigned in the future.  Already assigned participants remain at that phase ID, but that phase is no longer considered active."
				},
				"totalPhases()": {
					"notice": "Returns the total number of phases ever created (including removed)."
				},
				"updatePhase(uint256,string)": {
					"notice": "Updates the name of an existing phase. Only the owner can update phases."
				}
			},
			"notice": "A dynamic and optimized contract for managing a set of phases. Participants can be assigned to these phases. The owner can create, remove, or update phases, and also set which phase each participant is in.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"D/distributedPhase.sol": "DistributedPhase"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
			"license": "MIT",
			"urls": [
				"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
				"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"D/distributedPhase.sol": {
			"keccak256": "0x5e4c74a57b6440e27abfcfcdb546c44211ddb2ae412861fcc6fd9d126714aa3b",
			"license": "MIT",
			"urls": [
				"bzz-raw://35e9dda996d2deba85d24d20834437d3cdab5d624980fd794a2fa47bc5d9fd0b",
				"dweb:/ipfs/QmTKGTdGLh2UxSdyy6DkqmUPg8UbSYscay4HEakxGUP5PQ"
			]
		}
	},
	"version": 1
}