{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "PositionCanceled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "enum DerivativeContract.DerivativeType",
						"name": "dtype",
						"type": "uint8"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "creator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "collateral",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "expiry",
						"type": "uint256"
					}
				],
				"name": "PositionCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "counterparty",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "collateral",
						"type": "uint256"
					}
				],
				"name": "PositionJoined",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "winner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalCollateral",
						"type": "uint256"
					}
				],
				"name": "PositionSettled",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "positionId",
						"type": "uint256"
					}
				],
				"name": "cancelPosition",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "enum DerivativeContract.DerivativeType",
						"name": "dtype",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "collateral",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "expiry",
						"type": "uint256"
					}
				],
				"name": "createPosition",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "positionId",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "positionId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getLockedCollateral",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "positionId",
						"type": "uint256"
					}
				],
				"name": "getPosition",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "id",
								"type": "uint256"
							},
							{
								"internalType": "enum DerivativeContract.DerivativeType",
								"name": "dtype",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "creator",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "counterparty",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "collateral",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "expiry",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "active",
								"type": "bool"
							},
							{
								"internalType": "bool",
								"name": "settled",
								"type": "bool"
							}
						],
						"internalType": "struct DerivativeContract.Position",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "positionId",
						"type": "uint256"
					}
				],
				"name": "joinPosition",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "lockedCollateral",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nextPositionId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "positions",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "enum DerivativeContract.DerivativeType",
						"name": "dtype",
						"type": "uint8"
					},
					{
						"internalType": "address",
						"name": "creator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "counterparty",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "collateral",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "expiry",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "active",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "settled",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "positionId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "winner",
						"type": "address"
					}
				],
				"name": "settlePosition",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalPositions",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"cancelPosition(uint256)": {
					"params": {
						"positionId": "The ID of the position to cancel."
					}
				},
				"createPosition(uint8,uint256,uint256)": {
					"params": {
						"collateral": "The amount of collateral each participant must provide (in wei).",
						"dtype": "The type of derivative (Future, Option, CFD, etc.).",
						"expiry": "The expiration timestamp for the position."
					},
					"returns": {
						"positionId": "The unique ID assigned to the newly created position."
					}
				},
				"getLockedCollateral(uint256,address)": {
					"params": {
						"positionId": "The position ID.",
						"user": "The user's address."
					}
				},
				"joinPosition(uint256)": {
					"params": {
						"positionId": "The ID of the position to join."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"settlePosition(uint256,address)": {
					"params": {
						"positionId": "The ID of the position to settle.",
						"winner": "The address that wins the entire collateral (must be either creator or counterparty)."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "DerivativeContract",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"cancelPosition(uint256)": {
					"notice": "The creator can cancel the position if no counterparty has joined yet."
				},
				"constructor": {
					"notice": "Constructor sets the deployer as the initial owner."
				},
				"createPosition(uint8,uint256,uint256)": {
					"notice": "Create a derivative position, specifying type, required collateral, and expiry. The creator locks their collateral in this function."
				},
				"getLockedCollateral(uint256,address)": {
					"notice": "Returns total collateral locked by a user in a specific position."
				},
				"getPosition(uint256)": {
					"notice": "Retrieve details of a derivative position by ID."
				},
				"joinPosition(uint256)": {
					"notice": "A counterparty joins an existing position by providing the same amount of collateral."
				},
				"settlePosition(uint256,address)": {
					"notice": "The owner (acting as an oracle) settles the position after expiry, determining the winner."
				},
				"totalPositions()": {
					"notice": "Returns the total number of positions ever created (including canceled or settled)."
				}
			},
			"notice": "A dynamic, optimized, and secure contract for creating and managing simplified derivative positions. Two parties lock collateral for a position. Once the derivative expires, the contract owner (oracle) settles it, transferring collateral to the winning party.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"D/DerivativeContract.sol": "DerivativeContract"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
			"license": "MIT",
			"urls": [
				"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
				"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"D/DerivativeContract.sol": {
			"keccak256": "0xc4c3687e059b6c40f03c69e15b7786f98d0d71dd700febb744f266c60d721195",
			"license": "MIT",
			"urls": [
				"bzz-raw://7d462b1f675230c9d46d07e8da3ddd67c08114b85230993655669e6fa01b4e83",
				"dweb:/ipfs/QmPGetCcoy9oRDo5PX2769gSE9DUVLkkzk2HhaPk8Bk3DY"
			]
		}
	},
	"version": 1
}